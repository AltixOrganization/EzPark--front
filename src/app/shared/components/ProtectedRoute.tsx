import React from 'react';
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '../hooks/useAuth';
import LoadingSpinner from './LoadingSpinner';

interface ProtectedRouteProps {
    children: React.ReactNode;
}

/**
 * ProtectedRoute component
 * 
 * Este componente verifica si el usuario est√° autenticado.
 * Si no est√° autenticado, redirige al usuario a la p√°gina de login
 * y guarda la ubicaci√≥n actual para redirigir despu√©s del login.
 * Si est√° autenticado, renderiza el contenido hijo normalmente.
 * 
 * @param children - El contenido a renderizar si el usuario est√° autenticado
 */
const ProtectedRoute: React.FC<ProtectedRouteProps> = ({ children }) => {
    const { isAuthenticated, loading } = useAuth();
    const location = useLocation();

    console.log('üõ°Ô∏è ProtectedRoute: Verificando acceso a:', location.pathname, {
        isAuthenticated,
        loading
    });

    // Mostrar spinner durante la verificaci√≥n
    if (loading) {
        return <LoadingSpinner fullScreen text="Verificando autenticaci√≥n..." />;
    }

    // Redirigir si no est√° autenticado, guardando la ubicaci√≥n actual
    if (!isAuthenticated) {
        console.log('üö´ ProtectedRoute: Usuario no autenticado, redirigiendo a login');
        console.log('üíæ Guardando ubicaci√≥n para redirecci√≥n posterior:', location.pathname);
        
        return <Navigate 
            to="/login" 
            state={{ from: location }} 
            replace 
        />;
    }

    console.log('‚úÖ ProtectedRoute: Usuario autenticado, permitiendo acceso');

    // Renderizar normalmente si est√° autenticado
    return <>{children}</>;
};

export default ProtectedRoute;